"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path

from project.utils import Fork


ENVIRONMENT = os.environ.get("ENVIRONMENT", "local")
ENV_FORK = Fork(**{ENVIRONMENT: True})

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ENV_FORK(dev=Fork.get_env_var("DJANGO_SECRET_KEY"), local="abc123")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ENV_FORK(dev=False, local=True)

LOCAL_HOST = "127.0.0.1"
ALLOWED_HOSTS = ENV_FORK(dev=["strawberry.colecarter.dev"], local=[LOCAL_HOST])


# Application definition

INSTALLED_APPS = [
    # Django
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Custom
    "apps.account",
    "apps.mx_atrium",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Serves static files
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.jinja2.Jinja2",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {},
    },
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": ENV_FORK(
            dev=Fork.get_env_var("DJANGO_DATABASE_NAME"), local="postgres"
        ),
        "USER": ENV_FORK(
            dev=Fork.get_env_var("DJANGO_DATABASE_USER"), local="postgres"
        ),
        "PASSWORD": ENV_FORK(
            dev=Fork.get_env_var("DJANGO_DATABASE_PASSWORD"), local="postgres"
        ),
        "HOST": ENV_FORK(
            dev=Fork.get_env_var("DJANGO_DATABASE_HOST"), local=LOCAL_HOST
        ),
        "PORT": 5432,
    }
}

AUTH_USER_MODEL = "account.User"

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")


# MX Atrium constants
# https://atrium.mx.com/
MX_ATRIUM_API_KEY = ENV_FORK(dev=Fork.get_env_var("MX_ATRIUM_API_KEY"), local=None)
MX_ATRIUM_CLIENT_ID = ENV_FORK(dev=Fork.get_env_var("MX_ATRIUM_CLIENT_ID"), local=None)
MX_ATRIUM_API_URL = ENV_FORK(dev="https://vestibule.mx.com", local=None)


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}
